System transporttrolley

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

Request  pickup         : pickup( ARG )
Reply    pickupDone     : pickupDone( ARG )

Request  deposit        : deposit( ARG )
Reply    depositDone    : depositDone( ARG )

Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Dispatch gocontainer        : gocontainer( PATH )
//Reply    endDeposit       : endDeposit( TYPE)

Event    loaddeposit        : loaddeposit( TYPE, LOAD )

Request  findPath           : findPath( X_DESTINATION, Y_DESTINATION )
Reply    path               : path( PATH )

Request  dopath             : dopath( PATH  )
Reply 	 dopathdone     : dopathdone( ARG ) 
Reply 	 dopathfail     : dopathfail( ARG )

Context ctx_basicrobot 				  ip [ host="127.0.0.1" port=8020 ]  
Context ctx_transporttrolley	      ip [ host="localhost" port=8051 ]

ExternalQActor pathexec context ctx_basicrobot


QActor transporttrolley context ctx_transporttrolley {

	State s0 initial {
		printCurrentMessage	
	}
	
	Transition t0 whenRequest moveToDestination -> move
	
	State move {
		printCurrentMessage
		updateResource [# "work" #]
		
		onMsg( moveToDestination : info( X_DESTINATION, Y_DESTINATION )) {
			request pathfinder -m findPath : findPath( $payloadArg(0), $payloadArg(1) )
		}
	}
	
	Transition t1 whenReply dopathdone -> destinationReached
	
	State destinationReached {
		printCurrentMessage
		replyTo moveToDestination with destinationReached : destinationReached(ok)
	}
	
	Transition t2 whenRequest pickup -> handle_pickup
				  whenRequest deposit -> handle_deposit
				  whenRequest moveToDestination -> move
	
	
	State handle_pickup {
		printCurrentMessage
		delay 500
		replyTo pickup with pickupDone : pickupDone(true)
	}
	
	Transition t3 whenRequest moveToDestination -> move
	
	
	State handle_deposit {
		printCurrentMessage
		delay 500
		replyTo deposit with depositDone : depositDone(true)
	}
	
	Transition t4 whenRequest moveToDestination -> move
	
}

QActor pathfinder context ctx_transporttrolley { 

	
	State s0 initial {
		printCurrentMessage
		[# 
			unibo.kotlin.planner22Util.initAI();
			unibo.kotlin.planner22Util.loadRoomMap("mapRoomEmpty");
			unibo.kotlin.planner22Util.showMap();
			unibo.kotlin.planner22Util.showCurrentRobotState();
		#]	
	}
	
	Transition t0 whenRequest findPath -> findThePath
	
	State findThePath {
		[#
			var MovesToDo = ""	
		#]
		printCurrentMessage

		onMsg( findPath : findPath( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
				unibo.kotlin.planner22Util.planForGoal( X_Destination, Y_Destination )
				MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
				pathut.setPath(MovesToDo)
				pathut.updateMap()
			#] 
		}

		println(MovesToDo)
		request pathexec -m dopath : dopath($MovesToDo)
			
	}
	
	Transition t1 	whenReply dopathdone -> pathDone
					whenReply dopathfail -> pathFail
					
	
	State pathDone {
		printCurrentMessage
		
		replyTo findPath with dopathdone : dopathdone(ok)
	}
	
	Transition t2 whenRequest findPath -> findThePath
	
	State pathFail {
		printCurrentMessage
		println("PATH FAILED")
	}

}



