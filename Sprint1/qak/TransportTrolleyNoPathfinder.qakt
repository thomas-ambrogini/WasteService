System transporttrolley

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

Request  pickup         : pickup( ARG )
Reply    pickupDone     : pickupDone( ARG )

Request  deposit        : deposit( ARG )
Reply    depositDone    : depositDone( ARG )

Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Dispatch gocontainer        : gocontainer( PATH )
//Reply    endDeposit       : endDeposit( TYPE)

Event    loaddeposit        : loaddeposit( TYPE, LOAD )

Request  findPath           : findPath( X_DESTINATION, Y_DESTINATION )
Reply    path               : path( PATH )

Request  dopath             : dopath( PATH  )
Reply 	 dopathdone     : dopathdone( ARG ) 
Reply 	 dopathfail     : dopathfail( ARG )

Dispatch blink   : blink(_)
Dispatch turnon  : turnon(_)
Dispatch turnoff : turnoff(_)

//SONAR
Event distance : distance(DIST)
Dispatch stop   : stop(_)
Reply stopAck  : stopAck(_)
Dispatch resume : resume(_)
Reply   resumeAck : resumeAck(_)
Dispatch stopPath : stopPath(_)
Dispatch resumePath: resumePath(_)

Event alarm : alarm(STOP)


Dispatch coapUpdate : coapUpdate(RESOURCE, VALUE)

Context ctx_basicrobot 				  ip [ host="127.0.0.1" port=8020 ]  
Context ctx_transporttrolley	      ip [ host="localhost" port=8051 ]
Context ctx_rasp    				  ip [ host="127.0.0.1" port=8056 ]


ExternalQActor pathexec context ctx_basicrobot
ExternalQActor led  	context ctx_rasp

QActor transporttrolley context ctx_transporttrolley {
	
	State s0 initial {
		printCurrentMessage	
	}
	
	Transition t0 whenRequest moveToDestination -> move
	
	State move {
		printCurrentMessage
		updateResource [# "work" #]
		
		onMsg( moveToDestination : info( X_DESTINATION, Y_DESTINATION )) {
			
			request transporttrolley_mover -m findPath : findPath( $payloadArg(0), $payloadArg(1) )
		}
	}
	
	Transition t1 	whenReply dopathdone -> destinationReached
	
	State destinationReached {
		printCurrentMessage
		replyTo moveToDestination with destinationReached : destinationReached(ok)
	}
	
	Transition t2 whenRequest pickup -> handle_pickup
				  whenRequest deposit -> handle_deposit
				  whenRequest moveToDestination -> move
	
	
	State handle_pickup {
		printCurrentMessage
		delay 500
		replyTo pickup with pickupDone : pickupDone(true)
	}
	
	Transition t3 whenRequest moveToDestination -> move
	
	
	State handle_deposit {
		printCurrentMessage
		delay 500
		replyTo deposit with depositDone : depositDone(true)
	}
	
	Transition t4 	whenRequest moveToDestination -> move

}

QActor ledcontroller context ctx_transporttrolley {
	[#
		var AtHome = true
		var Stopped = false
	#]
	
	State init initial {
		observeResource transporttrolley_mover
	}
	Goto observe
	
	State observe {
		printCurrentMessage
	}	
	Transition t0 whenMsg coapUpdate -> handleStatus
 	
	State handleStatus {
		printCurrentMessage
		onMsg ( coapUpdate : coapUpdate(RESOURCE, VALUE) ) {
			println("Led Controller | Received update from ${payloadArg(0)}, is ${payloadArg(1)} ; currently AtHome $AtHome Stopped $Stopped")
			
			[# var NextLedState = "" #]
			
			if [# payloadArg(0) == "transporttrolley_mover" #] {
				
				// trolleyState(work|stopped)
				
				[# 
					Stopped = PayloadUtils.getTrolleyState(payloadArg(1)) == "stopped" 
				#]
				
				if [# Stopped #] {
					[# 
						NextLedState = "off"
					#]
				} else {
					if [# !AtHome #] {
						[# NextLedState = "blinking" #]
					} else {
						[# NextLedState = "on" #]
					}
				}
			}
			
//			if [# payloadArg(0) == "wasteservice" #] {
//				// tpos(LOC)
//				[# AtHome = resourcePrologUtils.resourcePayloadArg(myself, "tpos", 0) == "home" #]
//				if [# !Stopped #] {
//					if [# AtHome #] {
//						[# NextLedState = "on" #]
//					} else {
//						[# NextLedState = "blinking" #]
//					}
//				}
//			}

			if [# NextLedState == "on" #] {
				println("Led Controller | Setting led to $NextLedState")
				forward led -m turnon : turnon(on)		
			} else {
				if [# NextLedState == "off" #] {
					forward led -m turnoff : turnoff(off)
				}else {
					if [# NextLedState == "blinking" #] {
						forward led -m blink : blink(blink)	
					}
				}
			}
		}
		
	}
	
	Goto observe
}

QActor transporttrolley_mover context ctx_transporttrolley { 
	[#
		var RemainingPath = ""
	#]
	
	State s0 initial {
		printCurrentMessage
		[# 
			unibo.kotlin.planner22Util.initAI();
			unibo.kotlin.planner22Util.loadRoomMap("mapRoomEmpty");
			unibo.kotlin.planner22Util.showMap();
			unibo.kotlin.planner22Util.showCurrentRobotState();
		#]	
	}
	
	Transition t0 whenRequest findPath -> findThePath
	
	State findThePath {
		[#
			var MovesToDo = ""	
		#]
		printCurrentMessage
		
		updateResource [# "trollyState(work)" #]

		onMsg( findPath : findPath( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
				unibo.kotlin.planner22Util.planForGoal( X_Destination, Y_Destination )
				MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
				pathut.setPath(MovesToDo)
				pathut.updateMap()
			#] 
		}

		println(MovesToDo)
		request pathexec -m dopath : dopath($MovesToDo)
			
	}
	
	Transition t1 	whenMsg   stop       -> savepath
					whenReply dopathdone -> pathDone
					whenReply dopathfail -> handle_resume
					
	
	State pathDone {
		printCurrentMessage
		
		replyTo findPath with dopathdone : dopathdone(ok)
	}
	
	Transition t2 	whenMsg     stop     -> stopped
					whenRequest findPath -> findThePath
	
	
	State savepath {
		printCurrentMessage
		onMsg(dopathfail: dopathfail(PATH)){
			[#
				RemainingPath = payloadArg(0)
			#]	
		}
		println("TROLLEY | SAVE PATH: $RemainingPath")
	}
	
	Goto stopped
					
	State stopped {
		printCurrentMessage
		println("TROLLEY | STOPPED")
		updateResource [# "trollyState(stopped)" #]
	}
	
	Transition t7 whenMsg resume -> handle_resume
	
	State handle_resume {
		printCurrentMessage
		updateResource [# "trolleyState(work)" #]
		
		onMsg(resume : resume(STATE)){
			
			request pathexec -m dopath : dopath($RemainingPath) 
			
			[# RemainingPath = "" #]
		}

		
		onMsg (dopathfail   : dopathfail( ARG )) {
			[#
				var RemainingPath = payloadArg(0)
			#]
			if [# RemainingPath.length == 1 || RemainingPath.length == 0#]{
				[# RemainingPath = "" #]
				request pathexec -m dopath : dopath($RemainingPath) 
			}
			else{
				//mancano piÃ¹ step, quindi procedo
				request pathexec -m dopath : dopath($RemainingPath) 
			}
		}

	}
	
	Transition t2 whenMsg stop -> stopped
				  whenReply dopathdone -> pathDone
				  whenReply dopathfail -> handle_resume


}