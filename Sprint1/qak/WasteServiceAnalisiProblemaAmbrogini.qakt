System wasteservice

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

//Requisiti: ArrivoWasteTruck, Accettato e Respinto
Request  storeload  	: storeload( TYPE, LOAD )
Reply    loadaccepted   : loadaccepted( TYPE, LOAD )
Reply    loadrejected   : loadrejected( TYPE, LOAD )

Dispatch leaveIndoor    : leaveIndoor( ARG )

Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Request  pickup         : pickup( ARG )
Reply    pickupDone     : pickupDone( ARG )

Request  deposit        : deposit( ARG )
Reply    depositDone    : depositDone( ARG )

Request  dopath    : dopath( PATH  )
Reply dopathdone   : dopathdone( ARG )
Reply dopathfail   : dopathfail( ARG )

Request  findPath           : findPath( X_DESTINATION, Y_DESTINATION )
Reply    path               : path( PATH )



Context ctx_transporttrolley ip [host="127.0.0.1" port=8051]
Context ctx_basicrobot       ip [host="127.0.0.1" port=8020]
Context ctx_wasteservice ip [host="localhost" port=8049]

ExternalQActor pathexec context ctx_basicrobot

QActor wasteservice context ctx_wasteservice {
	[#
		var CurrentPlasticWeight = 0L
		var CurrentGlassWeight   = 0L
		var OffsetPlastic        = 0L
		var OffsetGlass          = 0L
		val MAXP				 = 200L
		val MAXG				 = 200L
		var Accepted             = false
		var Type                 = ""
		
	#]
	
	State s0 initial {
		printCurrentMessage
	}
	
	Transition t0 whenRequest storeload -> handleTruck
	
	State handleTruck {
		printCurrentMessage
		
		onMsg( storeload : storeload( TYPE, LOAD ) ) {
			[#
				Type   = payloadArg(0)
				val Weight = payloadArg(1).toLong()	
			#]
			
			if [# Type.equals("glass")#] {
				if [# CurrentGlassWeight + OffsetGlass + Weight <= MAXG #] {
					[#
						OffsetGlass  += Weight
						Accepted = true
					#]
					replyTo storeload with loadaccepted : loadaccepted( glass, $Weight )
					
				}
				else {
					[#
						Accepted = false	
					#]
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
				
			} else {
				if [# CurrentPlasticWeight + OffsetPlastic + Weight <= MAXP #] {
					[#
						OffsetPlastic  += Weight
						Accepted = true
					#]
					replyTo storeload with loadaccepted : loadaccepted( plastic, $Weight )
				
				}
				else {
					[#
						Accepted = false	
					#]
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
			}
		}
		
	}
	
	Goto moveTrolleyIndoor if [# Accepted == true #] else s0
	
	State moveTrolleyIndoor {
		printCurrentMessage
		
		[#
			val X_Destination = positionUt.getCordX("indoor")
			val Y_Destination = positionUt.getCordY("indoor")
		#]
		
		
		request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
	}
	
	Transition t2 whenReply destinationReached -> handlepickup
	
	State handlepickup {
		printCurrentMessage
		updateResource [# "trolleyPosition(indoor)" #]
	
		request transporttrolley -m pickup : pickup(true)
	}
	
	Transition t11 whenReply pickupDone -> handle_pickupDone
	
	State handle_pickupDone {
		printCurrentMessage
		
		forward wastetruck -m leaveIndoor : leaveIndoor(leave)
		
	}
				 
	
	Goto  moveTrolleyContainer
	
	State moveTrolleyContainer {
		printCurrentMessage
		
		[#
			val X_Destination = positionUt.getCordX(Type)
			val Y_Destination = positionUt.getCordY(Type)
		#]
		
			
		request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
		
		
	}
	
	Transition t4 whenReply destinationReached -> handleDeposit
	
	State handleDeposit {
		printCurrentMessage
		updateResource [# "trolleyPosition($Type)" #]
		
		request transporttrolley -m deposit : deposit(true)
		
	}
	
	Transition t11 whenReply depositDone -> handle_depositDone
	
	State handle_depositDone {
		printCurrentMessage
		
		[#
			CurrentGlassWeight   += OffsetGlass
			OffsetGlass           = 0
			CurrentPlasticWeight += OffsetPlastic
			OffsetPlastic         = 0
		#]
		
		updateResource [# "glass($CurrentGlassWeight), plastic($CurrentPlasticWeight)" #]
	}
	

	Transition t5 	whenTime 10 -> moveTrolleyHome
					whenRequest storeload -> handleTruck
		

					
	State moveTrolleyHome {
		printCurrentMessage
		
		[#
			val X_Destination = positionUt.getCordX("home")
			val Y_Destination = positionUt.getCordY("home")
		#]
		
		request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
	}
	
	Transition t12 whenReply destinationReached -> s0
	
}

QActor transporttrolley context ctx_transporttrolley {

	State s0 initial {
		printCurrentMessage	
	}
	
	Transition t0 whenRequest moveToDestination -> move
	
	State move {
		printCurrentMessage
		
		onMsg( moveToDestination : info( X_DESTINATION, Y_DESTINATION )) {
			request pathfinder -m findPath : findPath( $payloadArg(0), $payloadArg(1) )
		}
	}
	
	Transition t1 whenReply dopathdone -> destinationReached
	
	State destinationReached {
		printCurrentMessage
		replyTo moveToDestination with destinationReached : destinationReached(ok)
	}
	
	Transition t2 whenRequest pickup -> handle_pickup
				  whenRequest deposit -> handle_deposit
				  whenRequest moveToDestination -> move
	
	
	State handle_pickup {
		printCurrentMessage
		delay 500
		replyTo pickup with pickupDone : pickupDone(true)
	}
	
	Transition t3 whenRequest moveToDestination -> move
	
	
	State handle_deposit {
		printCurrentMessage
		delay 500
		replyTo deposit with depositDone : depositDone(true)
	}
	
	Transition t4 whenRequest moveToDestination -> move
	
}

QActor pathfinder context ctx_transporttrolley { 

	
	State s0 initial {
		printCurrentMessage
		[# 
			unibo.kotlin.planner22Util.initAI();
			unibo.kotlin.planner22Util.loadRoomMap("mapRoomEmpty");
			unibo.kotlin.planner22Util.showMap();
			unibo.kotlin.planner22Util.showCurrentRobotState();
		#]	
	}
	
	Transition t0 whenRequest findPath -> findThePath
	
	State findThePath {
		[#
			var MovesToDo = ""	
		#]
		printCurrentMessage

		onMsg( findPath : findPath( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
				unibo.kotlin.planner22Util.planForGoal( X_Destination, Y_Destination )
				MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
				pathut.setPath(MovesToDo)
				pathut.updateMap()
			#] 
		}

		println(MovesToDo)
		request pathexec -m dopath : dopath($MovesToDo)
			
	}
	
	Transition t1 	whenReply dopathdone -> pathDone
					whenReply dopathfail -> pathFail
					
	
	State pathDone {
		printCurrentMessage
		
		replyTo findPath with dopathdone : dopathdone(ok)
	}
	
	Transition t2 whenRequest findPath -> findThePath
	
	State pathFail {
		printCurrentMessage
		println("PATH FAILED")
	}

}


QActor wastetruck context ctx_wasteservice {
	
	
	State s0 initial {
		printCurrentMessage
		
		delay 5000
	}
	
	Goto requestdischarge
	
	State requestdischarge {
		printCurrentMessage
		
		[# 
			val Load    = kotlin.random.Random.nextLong(10,100)
			val RandInt = kotlin.random.Random.nextInt(0,1)
			var Type    = ""
			
			if(RandInt == 0) 
				Type = "glass"
			else
				Type = "plastic"
		#]
		request wasteservice -m storeload : storeload( $Type, $Load )
		
	}
	
	Transition t1 whenReply loadaccepted -> accepted
				  whenReply loadrejected -> rejected
	
	State rejected {
		printCurrentMessage
		println("Request rejected")
	}
	
	Goto s0
	
	State accepted {
		printCurrentMessage
		println("Request accepted")
	}
	
	Transition t2 whenMsg leaveIndoor -> handleleave
	
	State handleleave {
		printCurrentMessage
		println("Leaving indoor")
	}
	
	Goto s0
}

