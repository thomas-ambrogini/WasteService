System transporttrolley

Request  pickup         	: pickup( ARG )
Reply    pickupDone     	: pickupDone( ARG )
Request  deposit        	: deposit( ARG )
Reply    depositDone    	: depositDone( ARG )
Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Request  findPath           : findPath( X_DESTINATION, Y_DESTINATION )
Reply    path               : path( PATH )

Request  dopath             : dopath( PATH  )
Reply 	 dopathdone     : dopathdone( ARG ) 
Reply 	 dopathfail     : dopathfail( ARG )

//SONAR
Dispatch stop  	 	: stop(_)
Dispatch resume 	: resume(_)
Event 	 alarm 		: alarm(STOP)
Event    sonardata  : distance( V )   

 

Context ctx_basicrobot 				  ip [ host="robot" port=8020 ]  
Context ctx_transporttrolley	      ip [ host="localhost" port=8051 ]


ExternalQActor pathexec context ctx_basicrobot

QActor transporttrolley context ctx_transporttrolley {
	
	State s0 initial {
		printCurrentMessage	
	}
	
	Transition t0 whenRequest moveToDestination -> move
	
	State move {
		printCurrentMessage
		updateResource [# "work" #]
		
		onMsg( moveToDestination : info( X_DESTINATION, Y_DESTINATION )) {
			
			request transporttrolley_mover -m findPath : findPath( $payloadArg(0), $payloadArg(1) )
		}
	}
	
	Transition t1 	whenReply dopathdone -> destinationReached
	
	State destinationReached {
		printCurrentMessage
		replyTo moveToDestination with destinationReached : destinationReached(ok)
	}
	
	Transition t2 whenRequest pickup -> handle_pickup
				  whenRequest deposit -> handle_deposit
				  whenRequest moveToDestination -> move
	
	
	State handle_pickup {
		printCurrentMessage
		delay 5000
		replyTo pickup with pickupDone : pickupDone(true)
	}
	
	Transition t3 whenRequest moveToDestination -> move
	
	
	State handle_deposit {
		printCurrentMessage
		delay 5000
		replyTo deposit with depositDone : depositDone(true)
	}
	
	Transition t4 	whenRequest moveToDestination -> move

}



QActor transporttrolley_mover context ctx_transporttrolley { 
	[#
		var RemainingPath = ""
	#] 
	
	State s0 initial {
		
		printCurrentMessage
		[# 
			unibo.kotlin.planner22Util.initAI();
			unibo.kotlin.planner22Util.loadRoomMap("mapRoomEmpty");
			unibo.kotlin.planner22Util.showMap();
			unibo.kotlin.planner22Util.showCurrentRobotState();
		#]	
	}
	
	Goto idle
	
	State idle {
		printCurrentMessage
		updateResource [# "trolleyState(idle)" #]
		
	}
	
	Transition t0 	whenMsg     stop     -> stopped
					whenRequest findPath -> findThePath
	
	State findThePath {
		updateResource [# "trolleyState(work)" #]
		[#
			var MovesToDo = ""	
		#]
		printCurrentMessage

		onMsg( findPath : findPath( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
				unibo.kotlin.planner22Util.planForGoal( X_Destination, Y_Destination )
				MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
				pathut.setPath(MovesToDo)
				pathut.updateMap()
			#] 
		}

		println(MovesToDo)
		request pathexec -m dopath : dopath($MovesToDo)
			
	}
	
	Transition t1 	whenMsg   stop       -> savepath
					whenReply dopathdone -> pathDone
					whenReply dopathfail -> handle_resume
					
	
	State pathDone {
		printCurrentMessage
		
		replyTo findPath with dopathdone : dopathdone(ok)
	}
	
//	Transition t2 	whenMsg     stop     -> stopped
//					whenRequest findPath -> findThePath

	Goto idle
	
	
	State savepath {
		printCurrentMessage
		onMsg(dopathfail: dopathfail(PATH)){
			[#
				RemainingPath = payloadArg(0)
			#]	
		}
		emit alarm : alarm(STOP)
		println("TROLLEY | SAVE PATH: $RemainingPath")
	}
	
	Goto stopped
					
	State stopped {
		printCurrentMessage
		println("TROLLEY | STOPPED")
		updateResource [# "trolleyState(stopped)" #]
	}
	
	Transition t7 whenMsg resume -> handle_resume
	
	State handle_resume {
		printCurrentMessage
		updateResource [# "trolleyState(work)" #]
		
		onMsg(resume : resume(STATE)){
			
			request pathexec -m dopath : dopath($RemainingPath) 
			
			[# RemainingPath = "" #]
		}

		
		onMsg (dopathfail   : dopathfail( ARG )) {
			[#
				var RemainingPath = payloadArg(0)
			#]
			if [# RemainingPath.length == 1 || RemainingPath.length == 0#]{
				[# RemainingPath = "" #]
				request pathexec -m dopath : dopath($RemainingPath) 
			}
			else{
				request pathexec -m dopath : dopath($RemainingPath) 
			}
		}

	}
	
	Transition t2 whenTime 5000 -> idle
				  whenMsg stop -> stopped
				  whenReply dopathdone -> pathDone
				  whenReply dopathfail -> handle_resume


}

QActor alarmemitter context ctx_transporttrolley {	
	
	[# 
		var DLIMIT = 20
		var stopped = "False"
	#]
	
	State s0 initial {
		printCurrentMessage
	}
	Transition t0 whenEvent sonardata -> handle_sonardata
	
	State handle_sonardata {
		printCurrentMessage
		
		onMsg ( sonardata : distance (DIST) ) {
			[# val dLimit = DLIMIT #]
			[# val dist = payloadArg(0).toFloat() #]

			if [# dist <= dLimit && stopped.equals("False")#] {
				println("STOP")
				[# stopped = "True" #]
				forward transporttrolley_mover -m stop : stop(STOP)
			}
			if [# dist > dLimit && stopped.equals("True") #] {
				println("RESUME")
				[# stopped = "False" #]
				forward transporttrolley_mover -m resume : resume(RESUME)
			}
		}
	}
	
	Goto s0
	
}
