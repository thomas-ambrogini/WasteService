System wasteservice

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

//Requisiti: ArrivoWasteTruck, Accettato e Respinto
Request  storeload  	: storeload( TYPE, LOAD )
Reply    loadaccepted   : loadaccepted( TYPE, LOAD )
Reply    loadrejected   : loadrejected( TYPE, LOAD )

Dispatch leaveindoor    : leaveindoor( ARG )

Event    loaddeposit    : loaddeposit( TYPE, LOAD )

Request  pickup         : pickup( ARG )
Reply    pickupDone     : pickupDone( ARG )

Request  deposit        : deposit( ARG )
Reply    depositDone    : depositDone( ARG )

Request  getCord        : getCord( DESTINATION )
Reply    cord           : cord( X_DESTINATION, Y_DESTINATION )

Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Request  moveToHome			: info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Context ctxtransporttrolley_prototype	ip [ host="127.0.0.1" port=8051 ]
Context ctxwasteservice_prototype		ip [ host="localhost" port=8049 ]


ExternalQActor transporttrolley context ctxtransporttrolley_prototype


QActor wasteservice context ctxwasteservice_prototype {
	[#
		var CurrentPlasticWeight = 0L
		var CurrentGlassWeight   = 0L
		var OffsetPlastic        = 0L
		var OffsetGlass          = 0L
		val MAXP				 = 200L
		val MAXG				 = 200L
		var Type                 = ""
	#]
	
	State s0 initial {
		printCurrentMessage
		updateResource [# "position(home)" #]
	}
	
	Transition t0 whenRequest storeload -> handleTruck
	
	State handleTruck {
		printCurrentMessage
		
		onMsg( storeload : storeload( TYPE, LOAD ) ) {
			[#
				Type   = payloadArg(0)
				val Weight = payloadArg(1).toLong()	
			#]
			
			if [# Type.equals("glass")#] {
				if [# CurrentGlassWeight + OffsetGlass + Weight <= MAXG #] {
					[#
						OffsetGlass  += Weight
					#]
					replyTo storeload with loadaccepted : loadaccepted( glass, $Weight )
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
				
			} else {
				if [# CurrentPlasticWeight + OffsetPlastic + Weight <= MAXP #] {
					[#
						OffsetPlastic  += Weight	
					#]
					replyTo storeload with loadaccepted : loadaccepted( plastic, $Weight )
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
			}
		}
		
	}
	
	Goto moveTrolleyIndoor
	
	State moveTrolleyIndoor {
		printCurrentMessage
		
		[#
			val X_Destination = positionUt.getCordX("indoor")
			val Y_Destination = positionUt.getCordY("indoor")
		#]
		
		
		request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
	}
	
	Transition t2 whenReply destinationReached -> handlepickup
	
	State handlepickup {
		printCurrentMessage
		updateResource [# "position(indoor)" #]
	
		forward wastetruck -m leaveindoor : leaveindoor(ok)
		request transporttrolley -m pickup : pickup(true)
	}
	
	Transition t11 whenReply pickupDone -> handle_pickupDone
	
	State handle_pickupDone {
		printCurrentMessage
		
	}
	
	Goto  moveTrolleyContainer
	
	State moveTrolleyContainer {
		printCurrentMessage
		
		[#
			val X_Destination = positionUt.getCordX(Type)
			val Y_Destination = positionUt.getCordY(Type)
		#]
		
			
		request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
		
		
	}
	
	Transition t4 whenReply destinationReached -> handleDeposit
	
	State handleDeposit {
		printCurrentMessage
		updateResource [# "position($Type)" #]
		
		request transporttrolley -m deposit : deposit(true)
		
	}
	
	Transition t11 whenReply depositDone -> handle_depositDone
	
	State handle_depositDone {
		printCurrentMessage
		
		[#
			CurrentGlassWeight   += OffsetGlass
			OffsetGlass           = 0
			CurrentPlasticWeight += OffsetPlastic
			OffsetPlastic         = 0
		#]
		
		updateResource [# "glass($CurrentGlassWeight), plastic($CurrentPlasticWeight)" #]
	}
	

	Transition t5 	whenTime 10 -> moveTrolleyHome
					whenRequest storeload -> handleTruck
					

					
	State moveTrolleyHome {
		printCurrentMessage
		
		[#
			val X_Destination = positionUt.getCordX("home")
			val Y_Destination = positionUt.getCordY("home")
		#]
		
		request transporttrolley -m moveToHome : info( $X_Destination, $Y_Destination )
	}
	
	Transition t12 whenReply destinationReached -> s0
						
	
}
 

QActor wastetruck context ctxwasteservice_prototype {
	
	
	State s0 initial {
		printCurrentMessage
		
		delay 5000
	}
	
	Goto requestdischarge
	
	State requestdischarge {
		printCurrentMessage
		
		[# 
			val Load    = kotlin.random.Random.nextLong(10,100)
			val RandInt = kotlin.random.Random.nextInt(0,2)
			println(RandInt)
			var Type    = ""
			
			if(RandInt == 0) 
				Type = "glass"
			else
				Type = "plastic"
		#]
		request wasteservice -m storeload : storeload( $Type, $Load )
		
	}
	
	Transition t1 whenReply loadaccepted -> accepted
				  whenReply loadrejected -> rejected
	
	State rejected {
		printCurrentMessage
		println("Request rejected")
	}
	
	Goto s0
	
	State accepted {
		printCurrentMessage
		println("Request accepted")
	}
	
	Transition t2 whenMsg leaveindoor -> handleleave
	
	State handleleave {
		printCurrentMessage
		println("Leaving indoor")
	}
	
	Goto s0
}

