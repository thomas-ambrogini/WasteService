System wasteservice

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

Dispatch pickup  : pickup(MAT)
Dispatch deposit : deposit(MAT)


Context ctxDepositRequirementAnalysis ip [ host="localhost" port=8050 ]
 
 
QActor transporttrolley context ctxDepositRequirementAnalysis {
	
	[#
		var Material = ""	
	#]
	
	
	State home initial {
		printCurrentMessage
		println("Trolley | HOME")
		updateResource [# "position(home)" #]
	}
	
	Transition t0 whenMsg pickup -> goingIndoor
	
	State goingIndoor {
		printCurrentMessage
		onMsg(pickup : pickup(MAT)) {
			[#
				Material = payloadArg(0)
			#]
		}
		println("Trolley | Going INDOOR")
		delay 1000
	}
	
	Goto pickup
	
	State pickup {
		printCurrentMessage
		updateResource [# "position(indoor)" #]
		println("Trolley | pickup material")
		delay 250
	}
	
	Goto goingContainer

	State goingContainer {
		printCurrentMessage
		println("Trolley | Going container")
		delay 1000
	}
	
	Goto deposit
	
	State deposit {
		printCurrentMessage
		updateResource [# "position($Material)" #]
		println("Trolley | deposit done")
		delay 250
		
		forward wasteservice -m deposit : deposit($Material)
	}
	
	Goto home
}



QActor wasteservice context ctxDepositRequirementAnalysis {
	
	[#
		var ContentGlass   = 0L
		var ContentPlastic = 0L
		var Type           = ""
		var Quantity       = 0L
		
	#]
	
	State idle initial {
		printCurrentMessage
	}
	
	Transition t0 whenMsg deposit -> depositDone
				  
	
	State sendMessage {
		printCurrentMessage
		[#
			Type     = "glass"
			Quantity = 10L
		#]
		
		forward transporttrolley -m pickup : pickup($Type)
	}
	
	Transition t1 whenMsg deposit -> depositDone
	
	State depositDone {
		printCurrentMessage 
		
		onMsg(deposit:deposit(MAT)) {
			[#
				Type = payloadArg(0)	
			#]
		}
		
		if [# Type.equals("glass") #]{
			[#
				ContentGlass += Quantity	
			#]
		}else {
			[#
				ContentPlastic += Quantity	
			#]
		}
		
	}
	
	Goto idle
}











