System rasp

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"


//TROLLEY
Request  pickup         : pickup( ARG )
Reply    pickupDone     : pickupDone( ARG )

Request  deposit        : deposit( ARG )
Reply    depositDone    : depositDone( ARG )

Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Dispatch gocontainer        : gocontainer( PATH )
//Reply    endDeposit       : endDeposit( TYPE)

Event    loaddeposit        : loaddeposit( TYPE, LOAD )

Request  findPath           : findPath( X_DESTINATION, Y_DESTINATION )
Reply    path               : path( PATH )

Request  dopath             : dopath( PATH  )
Reply 	 dopathdone     : dopathdone( ARG ) 
Reply 	 dopathfail     : dopathfail( ARG )


//LED 
Dispatch blink   : blink(_)
Dispatch turnon  : turnon(_)
Dispatch turnoff : turnoff(_)


//SONAR
Dispatch sonaractivate   : info(ARG)
Dispatch sonardeactivate : info(ARG)
Event    sonar           : distance( V )   //emitted by sonarSimulator or sonardatasource	
Event    sonardata       : distance( V )   //for the application level

Event distance : distance(DIST)
Dispatch stop   : stop(_)
Dispatch resume : resume(_)
Dispatch stopPath : stopPath(_)
Dispatch resumePath: resumePath(_)


Dispatch coapUpdate : coapUpdate(RESOURCE, VALUE)

Context ctx_wasteservice     ip [ host="192.168.1.7" port=8049 ]
Context ctx_rasp 			 ip [ host="localhost" port=8056 ]
 

//DATA SOURCES
CodedQActor sonarsimulator  context ctx_rasp className "sonarSimulator"  
CodedQActor sonardatasource context ctx_rasp className "sonarHCSR04Support2021"
CodedQActor datacleaner    	context ctx_rasp className "dataCleaner"

CodedQActor ledsimulator    context ctx_rasp className "ledSimulator"
CodedQActor ledconcrete     context ctx_rasp className "ledConcrete"



QActor led context ctx_rasp {
	[#
	   val simulate       = true
	   val ledActorName = "led"
	#]
	
	State start initial {
		run  ledConfig.configureTheLed(simulate, ledActorName)
		updateResource [# "ledState(off)" #]
	}
	
	Goto listen
	
	State listen {
		printCurrentMessage
	}
	Transition t0 whenMsg turnon  -> handle_on
				  whenMsg turnoff -> handle_off
				  whenMsg blink   -> handle_blink_on
	
	State handle_on {
		printCurrentMessage
		
		if [# `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #] {
			forward ledsimulator -m turnon :turnon(on)
		} else {
			forward ledconcrete -m turnon : turnon(on)
		}
		updateResource [# "ledState(on)" #]
	}
	Goto listen
	
	State handle_off {
		printCurrentMessage
		
		if [# `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #] {
			forward ledsimulator -m turnoff :turnoff(on)
		} else {
			forward ledconcrete -m turnoff : turnoff(on)
		}
		updateResource [# "ledState(off)" #]
	}
	Goto listen
	
	State handle_blink_on {
		printCurrentMessage
		
		if [# `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #] {
			forward ledsimulator -m turnon : turnon(blink)
		} else {
			forward ledconcrete -m turnon : turnon(blink)
		}
		updateResource [# "ledState(blink)" #]
	}
	
	Transition t0 whenTime 500 -> handle_blink_off 
				  whenMsg  turnon -> handle_on
				  whenMsg  turnoff-> handle_off
	
	State handle_blink_off {
		printCurrentMessage
		
		if [# `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #] {
			forward ledsimulator -m turnoff :turnoff(blink)
		} else {
			forward ledconcrete -m turnoff : turnoff(blink)
		}
		updateResource [# "ledState(blink)" #]
		
	}
	
	Transition t0 whenTime 500 -> handle_blink_on
				  whenMsg  turnon -> handle_on
				  whenMsg  turnoff-> handle_off
					
					
}


QActor sonarqak22 context ctx_rasp {	
	[# 
	   val simulate       = true
	   val sonarActorName = "sonarqak22"
	#]
	
	
	State s0 initial {
		//printCurrentMessage
		run  sonarConfig.configureTheSonar(simulate, sonarActorName)
		 
		//ASSUMPTION: the sonar subsystem emits the event sonar:distance(V)
	}
	Transition t0 whenMsg sonaractivate   -> activateTheSonar
			      whenMsg sonardeactivate -> deactivateTheSonar
			      
			      
	State activateTheSonar{
		printCurrentMessage
		if[#  `it.unibo`.radarSystem22.domain.utils.DomainSystemConfig.simulation #]{
			forward sonarsimulator -m sonaractivate : info(ok) 
			//run sonarConfig.activateSonarSimulated() //usingDomain
		}else {
			 forward sonardatasource -m sonaractivate : info(ok)  
		}
	}
	Transition t0  whenEvent sonar           -> handleSonarData  
	               whenMsg 	 sonardeactivate -> deactivateTheSonar
	               
	State deactivateTheSonar{
		printCurrentMessage
	}
	Goto end
	
	State handleSonarData{
  		 printCurrentMessage
  		 onMsg( sonar : distance(D) ){
   		 	[# val D = payloadArg(0) #]  
  		    println("%%%%%%%%%%%%%%%%%%%%%%%%%%% emit %%%%%%%%%%%%%%% ${D}")
  		 	emit sonardata : distance($D) //for the application
  		 }
  	}
  	Transition t0 whenEvent sonar -> handleSonarData
   				  whenMsg   sonardeactivate -> deactivateTheSonar
	
	State end{ 
		println("sonarqak22 BYE")
		[# System.exit(0) #]
	}
	
}

QActor ledcontroller context ctx_rasp {
	[#
		val Host = utils.read_host()
		var AtHome = true
		var Stopped = false
		var CurrentLedState = "off"
		var State   = ""
	#]
	
	State init initial {
		qrun coapObserverUtil.startObservingHost(myself, "$Host:8049", "ctx_wasteservice/transporttrolley_mover")
		qrun coapObserverUtil.startObservingHost(myself, "$Host:8049", "ctx_wasteservice/wasteservice")
	}
	Goto observe
	
	State observe {
		printCurrentMessage
	}	
	Transition t0 whenMsg coapUpdate -> handleStatus

 	
	State handleStatus {
		printCurrentMessage
		
		onMsg ( coapUpdate : coapUpdate(RESOURCE, VALUE) ) {
			[# 
				var NextLedState 	= "" 
			#]
			
			println("Led Controller | Received update from ${payloadArg(0)}, is ${payloadArg(1)} ; currently AtHome $AtHome Stopped $Stopped CurrentState $CurrentLedState")
			

			
			if [# payloadArg(0) == "ctx_wasteservice_transporttrolley_mover" #] {
				
				// trolleyState(work|stopped|idle)
				
				[# 
					State   = PayloadUtils.getTrolleyState(payloadArg(1))
					Stopped = State == "stopped" 
				#]
				
				if [# Stopped #] {
					[# 
						NextLedState = "on"
					#]
				} else {
					if [# State == "work" #] {
						[# NextLedState = "blinking" #]
					} else {
						[# NextLedState = "off" #]
					}
				}
			}
			
			if [# payloadArg(0) == "ctx_wasteservice_wasteservice" #] {
				// trolleyPosition(LOC)
				[# AtHome = PayloadUtils.getTrolleyPosition(payloadArg(1)) == "home" #]
				if [# !Stopped #] {
					if [# AtHome || State == "idle"#] {
						[# NextLedState = "off" #]
					} else {
						if [# State == "work"#] {
							[# NextLedState = "blinking" #]
						}
					}
				}
			}
			
			println("Led Controller | Setting led to $NextLedState")
			
			if [# NextLedState == "on" #] {
				forward led -m turnon : turnon(on)
				
				[#
					CurrentLedState = "on"
				#]	
				
			} else {
				if [# NextLedState == "off" #] {
					forward led -m turnoff : turnoff(off)
					
					[#
						CurrentLedState = "off"
					#]	
					
				}else {
					if [# NextLedState == "blinking" && CurrentLedState != "blinking" #] {
						forward led -m blink : blink(blink)	
						
						[#
							CurrentLedState = "blinking"
						#]	
					}
				}
			}
		}
		
	}
	
	Goto observe
}

QActor sonarmastermock context ctx_rasp{
	
	[#
	
		val SonarTimeout =	DomainSystemConfig.getSonarTimeout()
		
		val SonarEndless =  DomainSystemConfig.isSonarEndless()
	#
	]
	
	State s0 initial {
		forward sonarqak22 -m sonaractivate : info(ok)
		
		if [# !SonarEndless#]{
		
		delayVar SonarTimeout
		forward sonarqak22 -m sonardeactivate : info(ok)
		}
	}
} 







