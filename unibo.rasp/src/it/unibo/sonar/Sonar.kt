/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "scanWait"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Val = 200
				var Wait = 2000L
		return { //this:ActionBasciFsm
				state("scanWait") { //this:State
					action { //it:State
						 Wait = kotlin.random.Random.nextLong(2000, 3500)  
						stateTimer = TimerActor("timer_scanWait", 
							scope, context!!, "local_tout_sonar_scanWait", Wait )
					}
					 transition(edgeName="t050",targetState="scan",cond=whenTimeout("local_tout_sonar_scanWait"))   
				}	 
				state("scan") { //this:State
					action { //it:State
						 
									Val = Val - 10
						println("	Sonar: detected distance $Val")
						emit("sonardata", "distance($Val)" ) 
						updateResourceRep( "$Val"  
						)
					}
					 transition( edgeName="goto",targetState="scanWait", cond=doswitch() )
				}	 
			}
		}
}
