/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t011",targetState="move",cond=whenRequest("moveToDestination"))
				}	 
				state("move") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "work"  
						)
						if( checkMsgContent( Term.createTerm("info(X_DESTINATION,Y_DESTINATION)"), Term.createTerm("info(X_DESTINATION,Y_DESTINATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								request("findPath", "findPath(${payloadArg(0)},${payloadArg(1)})" ,"transporttrolley_mover" )  
						}
					}
					 transition(edgeName="t112",targetState="destinationReached",cond=whenReply("dopathdone"))
				}	 
				state("destinationReached") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("moveToDestination", "destinationReached", "destinationReached(ok)"   )  
					}
					 transition(edgeName="t213",targetState="handle_pickup",cond=whenRequest("pickup"))
					transition(edgeName="t214",targetState="handle_deposit",cond=whenRequest("deposit"))
					transition(edgeName="t215",targetState="move",cond=whenRequest("moveToDestination"))
				}	 
				state("handle_pickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(5000) 
						answer("pickup", "pickupDone", "pickupDone(true)"   )  
					}
					 transition(edgeName="t316",targetState="move",cond=whenRequest("moveToDestination"))
				}	 
				state("handle_deposit") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(5000) 
						answer("deposit", "depositDone", "depositDone(true)"   )  
					}
					 transition(edgeName="t417",targetState="move",cond=whenRequest("moveToDestination"))
				}	 
			}
		}
}
