/* Generated by AN DISI Unibo */ 
package it.unibo.alarmemitter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Alarmemitter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var DLIMIT = 50
				var stopped = "False"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handle_sonardata",cond=whenEvent("sonardata"))
				}	 
				state("handle_sonardata") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(DIST)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val dLimit = DLIMIT  
								 val dist = payloadArg(0).toFloat()  
								if(  dist <= dLimit && stopped.equals("False") 
								 ){println("STOP")
								 stopped = "True"  
								forward("stop", "stop(STOP)" ,"transporttrolley_mover" ) 
								}
								if(  dist > dLimit && stopped.equals("True")  
								 ){println("RESUME")
								 stopped = "False"  
								forward("resume", "resume(RESUME)" ,"transporttrolley_mover" ) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
