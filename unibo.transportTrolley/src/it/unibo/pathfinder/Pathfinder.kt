/* Generated by AN DISI Unibo */ 
package it.unibo.pathfinder

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pathfinder ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val XGlass    = "6"
				val YGlass 	  = "4"
				val XPlastic  = "5"
				val YPlastic  = "0"
				val XIndoor   = "1"
				val YIndoor   = "4"
				val XHome     = "0"
				val YHome     = "0"
				var Position  = ""
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 
									unibo.kotlin.planner22Util.initAI();
									unibo.kotlin.planner22Util.loadRoomMap("mapRoomEmpty");
									unibo.kotlin.planner22Util.showMap();
									unibo.kotlin.planner22Util.showCurrentRobotState();
					}
					 transition(edgeName="t06",targetState="findThePath",cond=whenRequest("findPath"))
				}	 
				state("findThePath") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("findPath(POSITION)"), Term.createTerm("findPath(POSITION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Position = payloadArg(0)
						}
						
									unibo.kotlin.planner22Util.showCurrentRobotState();
									var MovesToDo : String
						if(  Position == "glass"  
						 ){
										unibo.kotlin.planner22Util.planForGoal( XGlass, YGlass )
										MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
						}
						else
						 {if(  Position == "plastic" 
						  ){
						 					unibo.kotlin.planner22Util.planForGoal( XPlastic, YPlastic )
						 					MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
						 }
						 else
						  {if(  Position == "indoor"  
						   ){
						  						unibo.kotlin.planner22Util.planForGoal( XIndoor, YIndoor )
						  						MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
						  }
						  else
						   {
						   						unibo.kotlin.planner22Util.planForGoal( XHome, YHome )
						   						MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
						   }
						  }
						 }
						
									pathut.setPath(MovesToDo)
									pathut.updateMap()
						println(MovesToDo)
						request("dopath", "dopath($MovesToDo)" ,"pathexec" )  
					}
					 transition(edgeName="t17",targetState="pathDone",cond=whenReply("dopathdone"))
					transition(edgeName="t18",targetState="pathFail",cond=whenReply("dopathfail"))
				}	 
				state("pathDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("findPath", "dopathdone", "dopathdone(ok)"   )  
					}
					 transition(edgeName="t29",targetState="findThePath",cond=whenRequest("findPath"))
				}	 
				state("pathFail") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("PATH FAILED")
					}
				}	 
			}
		}
}
