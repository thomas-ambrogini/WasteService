/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley_mover

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley_mover ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var RemainingPath = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 
									unibo.kotlin.planner22Util.initAI();
									unibo.kotlin.planner22Util.loadRoomMap("mapRoomEmpty");
									unibo.kotlin.planner22Util.showMap();
									unibo.kotlin.planner22Util.showCurrentRobotState();
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "trolleyState(idle)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t08",targetState="findThePath",cond=whenRequest("findPath"))
				}	 
				state("findThePath") { //this:State
					action { //it:State
						updateResourceRep( "trolleyState(work)"  
						)
						
									var MovesToDo = ""	
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("findPath(X_DESTINATION,Y_DESTINATION)"), Term.createTerm("findPath(X_DESTINATION,Y_DESTINATION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val X_Destination = payloadArg(0)
												val Y_Destination = payloadArg(1)
												unibo.kotlin.planner22Util.planForGoal( X_Destination, Y_Destination )
												MovesToDo = unibo.kotlin.planner22Util.getActions().joinToString("")
												pathut.setPath(MovesToDo)
												pathut.updateMap()
						}
						println(MovesToDo)
						request("dopath", "dopath($MovesToDo)" ,"pathexec" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t19",targetState="savepath",cond=whenDispatch("stop"))
					transition(edgeName="t110",targetState="pathDone",cond=whenReply("dopathdone"))
					transition(edgeName="t111",targetState="handle_resume",cond=whenReply("dopathfail"))
				}	 
				state("pathDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("findPath", "dopathdone", "dopathdone(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("savepath") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("dopathfail(ARG)"), Term.createTerm("dopathfail(PATH)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												RemainingPath = payloadArg(0)
						}
						emit("alarm", "alarm(STOP)" ) 
						println("TROLLEY | SAVE PATH: $RemainingPath")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stopped", cond=doswitch() )
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("TROLLEY | STOPPED")
						updateResourceRep( "trolleyState(stopped)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t712",targetState="handle_resume",cond=whenDispatch("resume"))
				}	 
				state("handle_resume") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "trolleyState(work)"  
						)
						if( checkMsgContent( Term.createTerm("resume(_)"), Term.createTerm("resume(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								request("dopath", "dopath($RemainingPath)" ,"pathexec" )  
								 RemainingPath = ""  
						}
						if( checkMsgContent( Term.createTerm("dopathfail(ARG)"), Term.createTerm("dopathfail(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var RemainingPath = payloadArg(0)
								if(  RemainingPath.length == 1 || RemainingPath.length == 0 
								 ){ RemainingPath = ""  
								request("dopath", "dopath($RemainingPath)" ,"pathexec" )  
								}
								else
								 {request("dopath", "dopath($RemainingPath)" ,"pathexec" )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t213",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t214",targetState="pathDone",cond=whenReply("dopathdone"))
					transition(edgeName="t215",targetState="handle_resume",cond=whenReply("dopathfail"))
				}	 
			}
		}
}
