System wasteservice

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

//Requisiti: ArrivoWasteTruck, Accettato e Respinto
Request  storeload  	: storeload( TYPE, LOAD )
Reply    loadaccepted   : loadaccepted( TYPE, LOAD )
Reply    loadrejected   : loadrejected( TYPE, LOAD )

Dispatch leaveindoor    : leaveindoor( ARG )

Event    loaddeposit    : loaddeposit( TYPE, LOAD )

Request  activate       : activate( TYPE, LOAD )
Reply    pickupDone     : pickupDone( ARG )

Context ctxwasteserviceproblemanalysis ip [host="localhost" port=8050]


QActor wasteservice context ctxwasteserviceproblemanalysis {
	[#
		var CurrentPlasticWeight = 0L
		var CurrentGlassWeight   = 0L
		var OffsetPlastic        = 0L
		var OffsetGlass          = 0L
		val MAXP				 = 200L
		val MAXG				 = 200L
		
	#]
	
	State s0 initial {
		printCurrentMessage
	}
	
	Transition t0 whenRequest storeload -> handleTruck
	
	State handleTruck {
		printCurrentMessage
		
		onMsg( storeload : storeload( TYPE, LOAD ) ) {
			[#
				val Type   = payloadArg(0)
				val Weight = payloadArg(1).toLong()	
			#]
			
			if [# Type.equals("glass")#] {
				if [# CurrentGlassWeight + OffsetGlass + Weight <= MAXG #] {
					[#
						OffsetGlass  += Weight
					#]
					replyTo storeload with loadaccepted : loadaccepted( glass, $Weight )
					request transporttrolley -m activate : activate($Type, $Weight)
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
				
			} else {
				if [# CurrentPlasticWeight + OffsetPlastic + Weight <= MAXP #] {
					[#
						OffsetPlastic  += Weight	
					#]
					replyTo storeload with loadaccepted : loadaccepted( plastic, $Weight )
					request transporttrolley -m activate : activate($Type, $Weight)
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
			}
		}
		
	}
	
	Transition t1 whenReply pickupDone -> handlepickup
	
	State handlepickup {
		printCurrentMessage

		forward wastetruck -m leaveindoor : leaveindoor(ok)
	}
	
	Transition t2 whenEvent loaddeposit -> handledepositdone
				 
	
	State handledepositdone {
		printCurrentMessage
		
		onMsg( loaddeposit : loaddeposit( TYPE, LOAD )) {
			[#
				val Type = payloadArg(0)
				val Load = payloadArg(1).toLong()
				
				if(Type.equals("glass")) {
					CurrentGlassWeight   += Load
					OffsetGlass          -= Load
				}else {
					CurrentPlasticWeight += Load
					OffsetPlastic        -= Load
				}
			#]
		}
		
		println("Weight updated")
		
	}
	
	Goto s0
	
}

QActor transporttrolley context ctxwasteserviceproblemanalysis {
	[#
		var Container = ""
		var Load      = 0L
	#]
	
	State s0 initial {
		printCurrentMessage
	}
	
	Transition t0 whenRequest activate -> handleactivate
	
	State handleactivate {
		printCurrentMessage
		
		onMsg( activate : activate( TYPE, LOAD )) {
			[#
				Container = payloadArg(0)
				Load      = payloadArg(1).toLong()
			#]
		}
		
		println("Going INDOOR")
	}
	
	Goto pickup
	
	State pickup {
		printCurrentMessage
		
		println("Pickup done")
		
		replyTo activate with pickupDone : pickupDone(ok)
	}
	
	Goto container
	
	State container {
		printCurrentMessage
		
		println("Going to $Container container")
		
	}
	
	Goto loaddeposit
	
	State loaddeposit {
		printCurrentMessage
		
		println("Deposit Done")
		
		emit loaddeposit : loaddeposit( $Container, $Load )
	}
	
	Transition t1 	whenTime 5 -> returnhome
					whenRequest activate -> handleactivate
				  
	State returnhome {
		printCurrentMessage
		println("Going HOME")
	}
	
	Goto s0
}

QActor wastetruck context ctxwasteserviceproblemanalysis {
	
	
	State s0 initial {
		printCurrentMessage
		
		delay 5000
	}
	
	Goto requestdischarge
	
	State requestdischarge {
		printCurrentMessage
		
		[# 
			val Load    = kotlin.random.Random.nextLong(10,100)
			val RandInt = kotlin.random.Random.nextInt(0,1)
			var Type    = ""
			
			if(RandInt == 0) 
				Type = "glass"
			else
				Type = "plastic"
		#]
		request wasteservice -m storeload : storeload( $Type, $Load )
		
	}
	
	Transition t1 whenReply loadaccepted -> accepted
				  whenReply loadrejected -> rejected
	
	State rejected {
		printCurrentMessage
		println("Request rejected")
	}
	
	Goto s0
	
	State accepted {
		printCurrentMessage
		println("Request accepted")
	}
	
	Transition t2 whenMsg leaveindoor -> handleleave
	
	State handleleave {
		printCurrentMessage
		println("Leaving indoor")
	}
	
	Goto s0
}

