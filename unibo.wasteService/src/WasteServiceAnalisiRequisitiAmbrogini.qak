System wasteservice

mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

//Requisiti: ArrivoWasteTruck, Accettato e Respinto
Request  storeload  	: storeload( TYPE, LOAD )
Reply    loadaccepted   : loadaccepted( TYPE, LOAD )
Reply    loadrejected   : loadrejected( TYPE, LOAD )


Context ctxWasteServicePrototipo1 ip [ host="localhost" port=8049 ]

QActor wasteservice context ctxWasteServicePrototipo1 {
	[#
		var CurrentPlasticWeight = 0L
		var CurrentGlassWeight   = 0L
		val MAXP				 = 200L
		val MAXG				 = 200L
	#]
	
	State s0 initial {
		printCurrentMessage
	}
	
	Transition t0 whenRequest storeload -> handleTruck
	
	State handleTruck {
		printCurrentMessage
		
		onMsg( storeload : storeload( TYPE, LOAD ) ) {
			[#
				val Type   = payloadArg(0)
				val Weight = payloadArg(1).toLong()	
			#]
			
			if [# Type.equals("glass")#] {
				if [# CurrentGlassWeight + Weight <= MAXG #] {
					replyTo storeload with loadaccepted : loadaccepted( glass, $Weight )
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
				
			} else {
				if [# CurrentPlasticWeight + Weight <= MAXP #] {
					replyTo storeload with loadaccepted : loadaccepted( plastic, $Weight )
					
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
			}
		}
		
	}
	
}

QActor transporttrolley context ctxWasteServicePrototipo1 {
	State s0 initial {
		printCurrentMessage
	}
}

QActor wastetruck context ctxWasteServicePrototipo1 {
	State s0 initial {
		printCurrentMessage
	}
	
	Goto requestdischarge
	
	State requestdischarge {
		printCurrentMessage
		
		request wasteservice -m storeload : storeload(glass, 15)
	}
	
	Transition t1 whenReply loadaccepted -> accepted
				  whenReply loadrejected -> rejected
	
	State rejected {
		printCurrentMessage
		println("Request rejected")
	}
	
	State accepted {
		printCurrentMessage
		println("Request accepted")
	}
}

