System wasteservice

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

//Requisiti: ArrivoWasteTruck, Accettato e Respinto
Request  storeload    : storeload( TYPE, LOAD )
Reply    loadaccept   : loadaccept( TYPE, LOAD )
Reply    loadrejected : loadrejected( TYPE, LOAD )


Context ctxrequestrequirementanalysis ip [ host="localhost" port=8050 ]
   
QActor wasteservice context ctxrequestrequirementanalysis { 
	[#
		var CurrentPlasticWeight = 0L
		var CurrentGlassWeight   = 0L
		val MAXP				 = 200L
		val MAXG				 = 200L
	#]
	
	State s0 initial {
		printCurrentMessage
	}
	
	Transition t0 whenRequest storeload -> handleTruck
	
	State handleTruck {
		printCurrentMessage
		
		onMsg( storeload : storeload( TYPE, LOAD ) ) {
			[#
				val Type   = payloadArg(0)
				val Weight = payloadArg(1).toLong()	
			#]
			
			if [# Type.equals("glass")#] {
				if [# CurrentGlassWeight + Weight <= MAXG #] {
					replyTo storeload with loadaccept : loadaccept( glass, $Weight )
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
				
			} else {
				if [# CurrentPlasticWeight + Weight <= MAXP #] {
					replyTo storeload with loadaccept : loadaccept( plastic, $Weight )
					
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
			}
		}
		 
	}
	 
	Goto s0 
}

/*
QActor wastetruck context ctxRequestRequirementAnalysis {
	
	State requestDischarge initial {
		printCurrentMessage
		
		[#
			var Material = if (kotlin.random.Random.nextInt(0,1) == 0) "glass" else "plastic"
			var Quantity = kotlin.random.Random.nextLong(10, 50)
		#]
		
		println("Truck has $Quantity kg of $Material")
		
		request wasteservice -m storeload : storeload( $Material , $Quantity )
	}
	
	Transition t1 whenReply loadaccept   -> accepted
				  whenReply loadrejected -> rejected
	
	State rejected {
		printCurrentMessage
		println("Request rejected")
	}
	
	Goto waitTime
	
	State accepted { 
		printCurrentMessage
		println("Request accepted")
	}
	
	Goto waitTime
	
	State waitTime {
		printCurrentMessage
		[# var DelayTime : kotlin.Long = kotlin.random.Random.nextLong(5000, 10000) #]
		delayVar DelayTime
	}
	
	Goto requestDischarge
}

*/

