/* Generated by AN DISI Unibo */ 
package it.unibo.pathfinder

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pathfinder ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t08",targetState="findpath",cond=whenRequest("retrievePath"))
				}	 
				state("findpath") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("retrievePath(START,GOAL)"), Term.createTerm("retrievePath(START,GOAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Start = payloadArg(0)
												val Goal  = payloadArg(1)
								println("Searching a path from $Start to $Goal")
								answer("retrievePath", "path", "path(www)"   )  
						}
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
