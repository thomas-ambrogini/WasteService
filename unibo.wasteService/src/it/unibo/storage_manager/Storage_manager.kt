/* Generated by AN DISI Unibo */ 
package it.unibo.storage_manager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Storage_manager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val Utility = utility.storage_manager.StorageManagerUtility()	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t00",targetState="handleRequest",cond=whenRequest("storeRequest"))
					transition(edgeName="t01",targetState="handleAsk",cond=whenRequest("storageAsk"))
					transition(edgeName="t02",targetState="handleUpdate",cond=whenDispatch("updateWeights"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storeRequest(MAT,QNT)"), Term.createTerm("storeRequest(MAT,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  Utility.checkDeposit(payloadArg(0), payloadArg(1).toDouble())  
								 ){answer("storeRequest", "storeRequestReply", "storeRequestReply(accepted)"   )  
								}
								else
								 {answer("storeRequest", "storeRequestReply", "storeRequestReply(rejected)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleAsk") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storageAsk(MAT)"), Term.createTerm("storageAsk(MAT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SpaceLeft = Utility.getWeight(payloadArg(0))  
								answer("storageAsk", "storageAmount", "storageAt(${payloadArg(0)},$SpaceLeft)"   )  
						}
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleUpdate") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 
									Utility.deposit()
									val CurrentGlass = Utility.getWeight("Glass")
									val CurrentPlastic = Utility.getWeight("Plastic")
						
						updateResourceRep( "glass($CurrentGlass), plastic($CurrentPlastic)"  
						)
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
