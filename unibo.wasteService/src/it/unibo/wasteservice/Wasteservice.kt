/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CurrentPlasticWeight = 0L
				var CurrentGlassWeight   = 0L
				var OffsetPlastic        = 0L
				var OffsetGlass          = 0L
				val MAXP				 = 200L
				val MAXG				 = 200L
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t00",targetState="handleTruck",cond=whenRequest("storeload"))
				}	 
				state("handleTruck") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storeload(TYPE,LOAD)"), Term.createTerm("storeload(TYPE,LOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Type   = payloadArg(0)
												val Weight = payloadArg(1).toLong()	
								if(  Type.equals("glass") 
								 ){if(  CurrentGlassWeight + OffsetGlass + Weight <= MAXG  
								 ){
														OffsetGlass  += Weight
								answer("storeload", "loadaccepted", "loadaccepted(glass,$Weight)"   )  
								request("activate", "activate($Type,$Weight)" ,"transporttrolley" )  
								}
								else
								 {answer("storeload", "loadrejected", "loadrejected(glass,$Weight)"   )  
								 }
								}
								else
								 {if(  CurrentPlasticWeight + OffsetPlastic + Weight <= MAXP  
								  ){
								 						OffsetPlastic  += Weight	
								 answer("storeload", "loadaccepted", "loadaccepted(plastic,$Weight)"   )  
								 request("activate", "activate($Type,$Weight)" ,"transporttrolley" )  
								 }
								 else
								  {answer("storeload", "loadrejected", "loadrejected(glass,$Weight)"   )  
								  }
								 }
						}
					}
					 transition(edgeName="t11",targetState="handlepickup",cond=whenReply("pickupDone"))
				}	 
				state("handlepickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("leaveindoor", "leaveindoor(ok)" ,"wastetruck" ) 
					}
					 transition(edgeName="t22",targetState="handledepositdone",cond=whenEvent("loaddeposit"))
				}	 
				state("handledepositdone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("loaddeposit(TYPE,LOAD)"), Term.createTerm("loaddeposit(TYPE,LOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val Type = payloadArg(0)
												val Load = payloadArg(1).toLong()
												
												if(Type.equals("glass")) {
													CurrentGlassWeight   += Load
													OffsetGlass          -= Load
												}else {
													CurrentPlasticWeight += Load
													OffsetPlastic        -= Load
												}
						}
						println("Weight updated")
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
