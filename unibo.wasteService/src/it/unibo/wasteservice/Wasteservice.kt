/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var MAXG     	= 300L;
				var MAXP     	= 300L;
				var CurrentG 	= 0L;
				var CurrentP 	= 0L;
				var TrolleyFree = true;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("waiting for trucks....")
					}
					 transition(edgeName="t03",targetState="requestDump",cond=whenRequest("dumpwaste"))
				}	 
				state("requestDump") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dumpwaste(TYPE,LOAD)"), Term.createTerm("dumpwaste(TYPE,WEIGHT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Type   = payloadArg(0);
												var Weight = payloadArg(1).toLong();
								if(  Type.equals("glass") 
								 ){if(  CurrentG + Weight <= MAXG  
								 ){answer("dumpwaste", "loadaccepted", "loadaccepted(glass,$Weight)"   )  
								
														CurrentG += Weight 
														TrolleyFree = false
								emit("currentweights", "currentweights($CurrentG,$CurrentP)" ) 
								forward("activate", "activate(glass)" ,"transportrolley" ) 
								}
								else
								 {answer("dumpwaste", "loadrejected", "loadrejected(glass,$Weight)"   )  
								 }
								}
								else
								 {if(  CurrentP + Weight <= MAXP  
								  ){answer("dumpwaste", "loadaccepted", "loadaccepted(plastic,$Weight)"   )  
								 
								 						CurrentP += Weight 
								 						TrolleyFree = false
								 emit("currentweights", "currentweights($CurrentG,$CurrentP)" ) 
								 forward("activate", "activate(plastic)" ,"transportrolley" ) 
								 }
								 else
								  {answer("dumpwaste", "loadrejected", "loadrejected(glass,$Weight)"   )  
								  }
								 }
						}
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
