/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "home"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var Type                 = ""
		return { //this:ActionBasciFsm
				state("home") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "trolleyPosition(home)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="moveTrolleyIndoor",cond=whenRequest("startDeposit"))
				}	 
				state("moveTrolleyIndoor") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						
									val X_Destination = positionUt.getCordX("indoor")
									val Y_Destination = positionUt.getCordY("indoor")
						if( checkMsgContent( Term.createTerm("startDeposit(TYPE)"), Term.createTerm("startDeposit(TYPE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Type = payloadArg(0)				
						}
						request("moveToDestination", "info($X_Destination,$Y_Destination)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t24",targetState="handlepickup",cond=whenReply("destinationReached"))
				}	 
				state("handlepickup") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "trolleyPosition(indoor)"  
						)
						request("pickup", "pickup(true)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t115",targetState="handle_pickupDone",cond=whenReply("pickupDone"))
				}	 
				state("handle_pickupDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						answer("startDeposit", "leaveIndoor", "leaveIndoor(leave)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moveTrolleyContainer", cond=doswitch() )
				}	 
				state("moveTrolleyContainer") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						
									val X_Destination = positionUt.getCordX(Type)
									val Y_Destination = positionUt.getCordY(Type)
						request("moveToDestination", "info($X_Destination,$Y_Destination)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t46",targetState="handleDeposit",cond=whenReply("destinationReached"))
				}	 
				state("handleDeposit") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "trolleyPosition($Type)"  
						)
						request("deposit", "deposit(true)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t117",targetState="handle_depositDone",cond=whenReply("depositDone"))
				}	 
				state("handle_depositDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("updateWeights", "updateWeights(_)" ,"storage_manager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handle_depositDone", 
				 	 					  scope, context!!, "local_tout_wasteservice_handle_depositDone", 10.toLong() )
					}	 	 
					 transition(edgeName="t58",targetState="moveTrolleyHome",cond=whenTimeout("local_tout_wasteservice_handle_depositDone"))   
					transition(edgeName="t59",targetState="moveTrolleyIndoor",cond=whenRequest("startDeposit"))
				}	 
				state("moveTrolleyHome") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						
									val X_Destination = positionUt.getCordX("home")
									val Y_Destination = positionUt.getCordY("home")
						request("moveToDestination", "info($X_Destination,$Y_Destination)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t1210",targetState="home",cond=whenReply("destinationReached"))
				}	 
			}
		}
}
