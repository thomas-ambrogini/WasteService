System wasteservice

//mqttBroker "broker.hivemq.com" : 1883 eventTopic "unibo/ambrogini/wasteService"

//Requisiti: ArrivoWasteTruck, Accettato e Respinto
Request  storeload  	: storeload( TYPE, LOAD )
Reply    loadaccepted   : loadaccepted( TYPE, LOAD )
Reply    loadrejected   : loadrejected( TYPE, LOAD )

Dispatch leaveindoor    : leaveindoor( ARG )

Event    loaddeposit    : loaddeposit( TYPE, LOAD )

Request  pickup         : pickup( ARG )
Reply    pickupDone     : pickupDone( ARG )

Request  deposit        : deposit( ARG )
Reply    depositDone    : depositDone( ARG )

Request  getCord        : getCord( DESTINATION )
Reply    cord           : cord( X_DESTINATION, Y_DESTINATION )

Request  moveToDestination  : info( X_DESTINATION, Y_DESTINATION )
Reply    destinationReached : destinationReached( ARG )

Request  findPath           : findPath( X_DESTINATION, Y_DESTINATION )
Reply    path               : path( PATH )

Request  dopath             : dopath( PATH  )
Reply 	 dopathdone     : dopathdone( ARG ) 
Reply 	 dopathfail     : dopathfail( ARG )
 


Context ctxwasteservice_prototypenotruck		ip [ host="localhost" port=8050 ]


QActor transporttrolley context ctxwasteservice_prototypenotruck {

	State s0 initial {
		printCurrentMessage 
	}
	
	Transition t0 whenRequest moveToDestination -> move
	
	State move {
		printCurrentMessage
		
		onMsg( moveToDestination : info( X_DESTINATION, Y_DESTINATION )) {
//			request pathfinder -m findPath : findPath( $payloadArg(0), $payloadArg(1) )
		}
	}
	
	Goto destinationReached
	
	State destinationReached {
		printCurrentMessage
		replyTo moveToDestination with destinationReached : destinationReached(ok)
	}
	
	Transition t2 whenRequest pickup -> handle_pickup
				  whenRequest deposit -> handle_deposit
				  whenRequest moveToDestination -> move
	
	
	State handle_pickup {
		printCurrentMessage
		delay 500
		replyTo pickup with pickupDone : pickupDone(true)
	}
	
	Transition t3 whenRequest moveToDestination -> move
	
	
	State handle_deposit {
		printCurrentMessage
		delay 500
		replyTo deposit with depositDone : depositDone(true)
	}
	
	Transition t4 whenRequest moveToDestination -> move
	
}

 


QActor navigator context ctxwasteservice_prototypenotruck {
	
	State s0 initial {
		printCurrentMessage
	}
	
	Transition t0 whenRequest getCord -> findCord
	
	State findCord {
		[#
			var Destination = ""
		#]
		onMsg( getCord : getCord( DESTINATION )) {
			[#
				Destination = payloadArg(0)
				val X_Cord = positionUt.getCordX(Destination)
				val Y_Cord = positionUt.getCordY(Destination)
			#]
			
			replyTo getCord with cord : cord($X_Cord, $Y_Cord)
		}
	}
	
	Goto s0
}


QActor wasteservice context ctxwasteservice_prototypenotruck {
	[#
		var CurrentPlasticWeight = 0L
		var CurrentGlassWeight   = 0L
		var OffsetPlastic        = 0L
		var OffsetGlass          = 0L
		val MAXP				 = 200L
		val MAXG				 = 200L
		var Type                 = ""
	#]
	
	State s0 initial {
		printCurrentMessage
		updateResource [# "position(home)" #]
	}
	
	Transition t0 whenRequest storeload -> handleTruck
	
	State handleTruck {
		printCurrentMessage
		
		onMsg( storeload : storeload( TYPE, LOAD ) ) {
			[#
				Type   = payloadArg(0)
				val Weight = payloadArg(1).toLong()	
			#]
			
			if [# Type.equals("glass")#] {
				if [# CurrentGlassWeight + OffsetGlass + Weight <= MAXG #] {
					[#
						OffsetGlass  += Weight
					#]
					replyTo storeload with loadaccepted : loadaccepted( glass, $Weight )
					request navigator -m getCord : getCord( indoor )
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
				
			} else {
				if [# CurrentPlasticWeight + OffsetPlastic + Weight <= MAXP #] {
					[#
						OffsetPlastic  += Weight	
					#]
					replyTo storeload with loadaccepted : loadaccepted( plastic, $Weight )
					request navigator -m getCord : getCord( indoor )
				}
				else {
					replyTo storeload with loadrejected : loadrejected( glass, $Weight )
				}
			}
		}
		
	}
	
	Transition t1 whenReply cord -> moveTrolleyIndoor
	
	State moveTrolleyIndoor {
		printCurrentMessage
		
		onMsg( cord : cord( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
			#]
			
			request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
		}
	}
	
	Transition t2 whenReply destinationReached -> handlepickup
	
	State handlepickup {
		printCurrentMessage
		updateResource [# "position(indoor)" #]
	
		request transporttrolley -m pickup : pickup(true)
	}
	
	Transition t11 whenReply pickupDone -> handle_pickupDone
	
	State handle_pickupDone {
		printCurrentMessage
		request navigator -m getCord : getCord( $Type )
	}
	
	Transition t3 whenReply cord -> moveTrolleyContainer
	
	State moveTrolleyContainer {
		printCurrentMessage
		
		onMsg( cord : cord( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
			#]
			
			request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
		}
		
	}
	
	Transition t4 whenReply destinationReached -> handleDeposit
	
	State handleDeposit {
		printCurrentMessage
		updateResource [# "position($Type)" #]
		
		request transporttrolley -m deposit : deposit(true)
		
	}
	
	Transition t11 whenReply depositDone -> handle_depositDone
	
	State handle_depositDone {
		printCurrentMessage
		
		[#
			CurrentGlassWeight   += OffsetGlass
			OffsetGlass           = 0
			CurrentPlasticWeight += OffsetPlastic
			OffsetPlastic         = 0
		#]
		updateResource [# "glass($CurrentGlassWeight), plastic($CurrentPlasticWeight)" #]
		
	}
	

	Transition t5 	whenTime 10 -> getCordHome
					whenRequest storeload -> handleTruck
					
	State getCordHome {
		printCurrentMessage
		
		request navigator -m getCord : getCord( home )
	}
	
	Transition t6   whenReply cord -> moveTrolleyHome
					
	State moveTrolleyHome {
		printCurrentMessage
		
		onMsg( cord : cord( X_DESTINATION, Y_DESTINATION )) {
			[#
				val X_Destination = payloadArg(0)
				val Y_Destination = payloadArg(1)
			#]
			
			request transporttrolley -m moveToDestination : info( $X_Destination, $Y_Destination )
		}
	}
	
	Goto s0
						
	
}
 
